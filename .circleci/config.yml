version: 2
jobs:
  build:
    working_directory: /code
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "build linux container"
          command: docker build -t linux-builder --file .docker/musl-linux.Dockerfile .docker
      - run: 
          name: Set up Mounts
          command: |
            docker rm code || true
            # creating dummy container which will hold a volume with config
            docker create -v /code --name code alpine:3.4 /bin/true
            # copying config file into this volume
            docker cp /code code:/
      - run:
          name: "build application"
          command: docker run --rm --volumes-from code --workdir /code linux-builder sh -c "cargo test && cargo build --release"

      - run: |
          # once application container finishes we can copy artifacts directly from it
          docker cp code:/code/target/x86_64-unknown-linux-musl/release/release-manager /code/artifacts/releaes-manager-linux
  windows:
    working_directory: /code
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "build windows builder"
          command: docker build -t windows-builder --file .docker/windows.Dockerfile .docker
      - run: 
          name: Set up Mounts
          command: |
            docker rm code || true
            # creating dummy container which will hold a volume with config
            docker create -v /code --name code alpine:3.4 /bin/true
            # copying config file into this volume
            docker cp /code code:/
      - run:
          name: "build application"
          command: docker run --rm --volumes-from code --workdir /code --env PKG_CONFIG_ALLOW_CROSS=1 windows-builder sh -c "cargo build --release --target x86_64-pc-windows-gnu"

      - run: |
          # once application container finishes we can copy artifacts directly from it
          docker cp code:/code/target/x86_64-pc-windows-gnu/release/release-manager.exe /code/artifacts/releaes-manager-windows.exe
  mac:
    working_directory: /code
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "build mac builder"
          command: docker build -t mac-builder --file .docker/mac.Dockerfile .docker
      - run: 
          name: Set up Mounts
          command: |
            docker rm code || true
            # creating dummy container which will hold a volume with config
            docker create -v /code --name code alpine:3.4 /bin/true
            # copying config file into this volume
            docker cp /code code:/
      - run:
          name: "build application"
          command: docker run --rm --volumes-from code --workdir /code --env PKG_CONFIG_ALLOW_CROSS=1 mac-builder sh -c "cargo build --release --target x86_64-apple-darwin"

      - run: |
          # once application container finishes we can copy artifacts directly from it
          docker cp code:/code/target/x86_64-apple-darwin/release/release-manager /code/artifacts/releaes-manager-macos
workflows:
  version: 2
  assemble:
    jobs:
      - build
      - windows
      - mac
