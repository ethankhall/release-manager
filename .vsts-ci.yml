phases:
  - phase: Windows Build
    dependsOn: Linux Build
    queue: Hosted VS2017
    steps:
      - powershell: |
          invoke-restmethod -usebasicparsing 'https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe' -outfile 'rustup-init.exe'
          ./rustup-init.exe -y --default-toolchain stable-x86_64-pc-windows-msvc --no-modify-path
          & "$env:USERPROFILE/.cargo/bin/rustup.exe" install nightly-x86_64-pc-windows-msvc
          remove-item rustup-init.exe
        displayName: Install Rust
      - powershell: |
          & "$env:USERPROFILE/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc test
        displayName: Run Tests
      - powershell: |
          & "$env:USERPROFILE/.cargo/bin/cargo.exe" +stable-x86_64-pc-windows-msvc build --release
        displayName: Build Release
      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: Release Build"
        inputs:
          PathtoPublish: ./target/release/release-manager.exe
          ArtifactName: release-manager-windows
          ArtifactType: Container

  - phase: Linux Build
    queue: Hosted Linux Preview
    steps:
      - task: Docker@0
        inputs:
          detached: false
          containerregistrytype: 'Container Registry'
          dockerFile: '.docker/musl-linux.Dockerfile'
          imageName: 'release-manager-musl'

      - task: Docker@0
        displayName: Build Application
        inputs:
          detached: false
          containerregistrytype: 'Container Registry'
          action: 'Run an image'
          imageName: 'release-manager-musl'
          volumes: $(Build.SourcesDirectory):/build
          workDir: '/build'
          containerCommand: '/bin/musl-build.sh'

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: Release Build"
        inputs:
          PathtoPublish: ./target/x86_64-unknown-linux-musl/release/release-manager
          ArtifactType: Container
          ArtifactName: release-manager-linux

  - phase: Mac Build
    queue: Hosted macOS Preview
    dependsOn: Linux Build
    steps:
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y
          
          
      - script: |
          $HOME/.cargo/bin/cargo build --release

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: Release Build"
        inputs:
          PathtoPublish: ./target/release/release-manager
          ArtifactName: release-manager-mac
          ArtifactType: Container

  - phase: Publish and Tag
    queue: Hosted Linux Preview
    dependsOn:
      - Linux Build
      - Mac Build
      - Windows Build
    steps:
      - task: DownloadBuildArtifacts
        inputs:
          artifactName: release-manager-linux

      - task: DownloadBuildArtifacts
        inputs:
          artifactName: release-manager-windows

      - task: DownloadBuildArtifacts
        inputs:
          artifactName: release-manager-mac

      - script: |
          $ART_DIR/release-manager-linux/release-manager github release-and-bump
          $ART_DIR/release-manager-linux/release-manager github artifacts \
            $ART_DIR/release-manager-linux=release-manager-linux/release-manager\
            $ART_DIR/release-manager-windows=release-manager-windows/release-manager\
            $ART_DIR/release-manager-mac=release-manager-mac/release-manager
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          ART_DIR: $(System.ArtifactsDirectory)